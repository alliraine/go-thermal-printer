name: release

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

permissions:
  contents: write       # create releases and upload assets
  packages: write       # push images to GHCR
  attestations: write   # upload build attestations
  id-token: write       # required for provenance attestations

env:
  APP_NAME: go-thermal-printer
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Create a semver tag and a changelog from Conventional Commits on main
  tag_and_release_main:
    name: tag + changelog (main)
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.tag.outputs.new_tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Auto-tag (Conventional Commits)
        id: tag
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          default_bump: patch
          release_branches: main
          tag_prefix: v

      - name: Generate changelog (latest)
        id: cliff
        uses: orhun/git-cliff-action@v4
        with:
          args: --latest -o CHANGELOG.md

      - name: Create GitHub release (stable)
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag.outputs.new_tag }}
          name: ${{ steps.tag.outputs.new_tag }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: false
          generate_release_notes: false


  # Build cross-compiled binaries for main releases
  build_and_attach_binaries_main:
    name: build binaries (main) ${{ matrix.goos }}-${{ matrix.goarch }}
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [tag_and_release_main]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - goos: linux
            goarch: amd64
            ext: ""
            archive: tar.gz
          - goos: windows
            goarch: amd64
            ext: ".exe"
            archive: zip
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Install zip
        run: |
          sudo apt-get update
          sudo apt-get install -y zip

      - name: Build
        env:
          CGO_ENABLED: 0
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          mkdir -p dist
          BIN_NAME="${APP_NAME}${{ matrix.ext }}"
          OUT_DIR="dist/${APP_NAME}_${{ matrix.goos }}_${{ matrix.goarch }}"
          mkdir -p "$OUT_DIR"
          go build -trimpath -ldflags "-s -w" -o "$OUT_DIR/$BIN_NAME" ./cmd/go-thermal-printer

      - name: Package
        run: |
          OUT_DIR="dist/${APP_NAME}_${{ matrix.goos }}_${{ matrix.goarch }}"
          # Include config and templates in the archive
          cp -v config.example.toml "$OUT_DIR/" || true
          cp -rv templates "$OUT_DIR/" || true
          ARCHIVE_BASE="${APP_NAME}_${{ needs.tag_and_release_main.outputs.tag }}_${{ matrix.goos }}_${{ matrix.goarch }}"
          pushd "$OUT_DIR" >/dev/null
          if [ "${{ matrix.archive }}" = "zip" ]; then
            zip -9 "../${ARCHIVE_BASE}.zip" *
          else
            tar -czf "../${ARCHIVE_BASE}.tar.gz" *
          fi
          popd >/dev/null
          # Checksums
          find dist -maxdepth 1 -type f \( -name "${APP_NAME}_*.zip" -o -name "${APP_NAME}_*.tar.gz" \) -print0 | while IFS= read -r -d '' f; do
            sha256sum "$f" > "${f}.sha256"
          done

      - name: List dist contents
        run: |
          echo "Dist directory contents:" && ls -la dist
          echo "Files:" && find dist -maxdepth 1 -type f -printf '%p\n'

      - name: Attest binaries (zip)
        if: ${{ matrix.archive == 'zip' }}
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: |
            dist/${{ env.APP_NAME }}_${{ needs.tag_and_release_main.outputs.tag }}_${{ matrix.goos }}_${{ matrix.goarch }}.zip
            dist/${{ env.APP_NAME }}_${{ needs.tag_and_release_main.outputs.tag }}_${{ matrix.goos }}_${{ matrix.goarch }}.zip.sha256

      - name: Upload assets to release (zip)
        if: ${{ matrix.archive == 'zip' }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.tag_and_release_main.outputs.tag }}
          files: |
            dist/${{ env.APP_NAME }}_${{ needs.tag_and_release_main.outputs.tag }}_${{ matrix.goos }}_${{ matrix.goarch }}.zip
            dist/${{ env.APP_NAME }}_${{ needs.tag_and_release_main.outputs.tag }}_${{ matrix.goos }}_${{ matrix.goarch }}.zip.sha256
          append_body: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Attest binaries (tar.gz)
        if: ${{ matrix.archive == 'tar.gz' }}
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: |
            dist/${{ env.APP_NAME }}_${{ needs.tag_and_release_main.outputs.tag }}_${{ matrix.goos }}_${{ matrix.goarch }}.tar.gz
            dist/${{ env.APP_NAME }}_${{ needs.tag_and_release_main.outputs.tag }}_${{ matrix.goos }}_${{ matrix.goarch }}.tar.gz.sha256

      - name: Upload assets to release (tar.gz)
        if: ${{ matrix.archive == 'tar.gz' }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.tag_and_release_main.outputs.tag }}
          files: |
            dist/${{ env.APP_NAME }}_${{ needs.tag_and_release_main.outputs.tag }}_${{ matrix.goos }}_${{ matrix.goarch }}.tar.gz
            dist/${{ env.APP_NAME }}_${{ needs.tag_and_release_main.outputs.tag }}_${{ matrix.goos }}_${{ matrix.goarch }}.tar.gz.sha256
          append_body: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


  # Docker build/push for main releases
  docker_build_and_attest_main:
    name: docker (main) build + push + attest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [tag_and_release_main]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          provenance: false
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.tag_and_release_main.outputs.tag }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

      - name: Create image attestation (SLSA provenance)
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.build.outputs.digest }}
          push-to-registry: true

      - name: Add container image info to release notes
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.tag_and_release_main.outputs.tag }}
          append_body: true
          body: |
            
            Image: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.tag_and_release_main.outputs.tag }}`
            Digest: `${{ steps.build.outputs.digest }}`

